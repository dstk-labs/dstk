#!/usr/bin/env bash

set -euo pipefail

# Convenience functions
info () {
  printf "\r[ \033[00;34m..\033[0m ] ${1:-}\n"
}

success () {
  printf "\r\033[2K[ \033[00;32mOK\033[0m ] ${1:-}\n"
}

fail () {
  printf "\r\033[2K[\033[0;31mFAIL\033[0m] ${1:-}\n"
}

check_binary () {
  set +e
  which $1 > /dev/null 2>&1
  status=$?
  if [ $status -eq 0 ]; then
    success "Found binary ${1} in PATH"
  else
    fail "No valid binary for ${1} found in PATH. Please correct your installation"
    exit 1
  fi
  set -e
}

query_psql () {
  PGPASSWORD="postgres" \
  psql \
    -h "127.0.0.1" \
    -p "5432" \
    -U postgres \
    -qtA $(echo "${1:-}")
}

# Setup checks
info "Checking for psql binary..."
check_binary "psql"


# TODOs
#   - command line args:
#     - user
#     - password
#     - hostname
#     - force
#     - dryrun
#     - namespace
# 
#   - get it out of bash

#  Test database connection
info "checking postgres availability"
pg_isready -d dstk_metadata -h 127.0.0.1 -p 5432 -U postgres &> /dev/null
success "Connected to postgres!"

# Enumerate patches
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd -P)
readarray -d '' patches < <(find "${SCRIPT_DIR}/../postgres/patches" -type f -name '*.sql' -print0 | sort)

for patch in "${patches[@]}"; do
  base_name=$(basename "${patch}")

  query="SELECT patch, applied FROM patch_status WHERE patch = '${base_name}';"
  IFS="|" read -r -a res <<< $(echo "${query}" | query_psql "dstk_metadata")

  if [ ${#res[@]} -eq 0 ]; then
    info "Applying patch ${base_name}"
    _now=$(date +%s)
    result=$(query_psql < "${patch}")
    _later=$(date +%s)

    duration=$((${_later} - ${_now}))
    query="INSERT INTO patch_status (patch, applied, duration) VALUES ('${base_name}', TRUE, ${duration});"
    result=$(echo "${query}" | query_psql "dstk_metadata")
    success "Applied patch ${base_name} in ${duration} seconds"
  fi
done

success "Patches successfully applied"