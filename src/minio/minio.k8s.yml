---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: minio
    app.kubernetes.io/name: minio
  name: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: minio
        app.kubernetes.io/name: minio
    spec:
      # initContainers:
      # - name: install
      #   image: alpine:latest
      #   command:
      #   - mkdir
      #   - -p
      #   - /data/dstk-registry
      #   volumeMounts:
      #   - name:  minio
      #     mountPath: "/data"
      containers:
        - args:
            - server
            - /data
          env:
            - name: MINIO_ROOT_USER
              value: ACCESSKEY
            - name: MINIO_ROOT_PASSWORD
              value: SECRETKEY
          image: minio/minio:latest
          name: minio
          ports:
            - containerPort: 9000
              name: minio-web
          # volumeMounts:
          #   - mountPath: /data
          #     name: minio
          resources:
            limits:
              cpu: 750m
              memory: 1024Mi
            requests:
              cpu: 250m
              memory: 256Mi

      restartPolicy: Always
      # volumes:
      #   - name: minio
      #     persistentVolumeClaim:
      #       claimName: minio
---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   labels:
#     io.kompose.service: minio
#     app.kubernetes.io/name: minio
#   name: minio
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 2Gi
# status: {}
# ---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: minio
  name: minio
spec:
  type: NodePort
  ports:
    - name: "9000"
      port: 9000
      protocol: TCP
      targetPort: minio-web
  selector:
    io.kompose.service: minio
status:
  loadBalancer: {}